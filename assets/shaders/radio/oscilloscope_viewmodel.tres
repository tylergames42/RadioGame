[gd_resource type="Shader" format=3 uid="uid://bexsnbiyvabr5"]

[resource]
code = "// NOTE: Shader automatically converted from Godot Engine 4.2.2.stable's StandardMaterial3D.

shader_type spatial;
render_mode blend_mix,depth_draw_opaque,cull_back,diffuse_burley,specular_schlick_ggx;
uniform vec4 albedo : source_color;
uniform sampler2D texture_albedo : source_color,filter_nearest_mipmap_anisotropic,repeat_enable;
uniform float point_size : hint_range(0,128);
uniform float roughness : hint_range(0,1);
uniform sampler2D texture_metallic : hint_default_white,filter_nearest_mipmap_anisotropic,repeat_enable;
uniform vec4 metallic_texture_channel;
uniform sampler2D texture_roughness : hint_roughness_r,filter_nearest_mipmap_anisotropic,repeat_enable;
uniform float specular;
uniform float metallic;
uniform float clearcoat : hint_range(0,1);
uniform float clearcoat_roughness : hint_range(0,1);
uniform sampler2D texture_clearcoat : hint_default_white,filter_nearest_mipmap_anisotropic,repeat_enable;

uniform float fov : hint_range(10.0, 170.0) = 80.0;

uniform float freq : hint_range(1.0, 100.0, 1.0) = 25.0;
uniform float ampl : hint_range(0.0, 1.0, 0.05) = 0.5;
uniform float vel : hint_range(0.0, 25.0, 0.5) = 5.0;
uniform float tightness : hint_range(0.0, 30.0, 0.1) = 20.0;
uniform bool quality_signal = false;
uniform vec4 wave_color : source_color = vec4(0.0, 1.0, 0.0, 1.0);

float random (vec2 uv) {
    return fract(sin(dot(uv.xy,
        vec2(12.9898,78.233))) * 43758.5453123);
}

void vertex() {
	float scale = 1.0 / tan(fov * 0.5 * PI / 180.0);
	PROJECTION_MATRIX[0][0] = scale / (VIEWPORT_SIZE.x / VIEWPORT_SIZE.y);
	PROJECTION_MATRIX[1][1] = -scale;
	
	POSITION = PROJECTION_MATRIX * MODELVIEW_MATRIX * vec4(VERTEX.xyz, 1.0);
	POSITION.z = mix(POSITION.z, 0, 0.99);
}

void fragment() {
	vec2 base_uv = UV;
	vec4 albedo_tex = texture(texture_albedo,base_uv);
	ALBEDO = albedo.rgb * albedo_tex.rgb;
	float metallic_tex = dot(texture(texture_metallic,base_uv),metallic_texture_channel);
	METALLIC = metallic_tex * metallic;
	vec4 roughness_texture_channel = vec4(1.0,0.0,0.0,0.0);
	float roughness_tex = dot(texture(texture_roughness,base_uv),roughness_texture_channel);
	ROUGHNESS = roughness_tex * roughness;
	SPECULAR = specular;
	vec2 clearcoat_tex = texture(texture_clearcoat,base_uv).xy;
	CLEARCOAT = clearcoat*clearcoat_tex.x;	CLEARCOAT_ROUGHNESS = clearcoat_roughness*clearcoat_tex.y;
	
	// Wave calculation
    vec2 wave_uv = vec2((UV.x + 0.5) * freq, (UV.y + 0.5) * 0.5);

    // Adjust noise generation for more control
    float noise = cos(wave_uv.x + TIME * random(wave_uv));
    float wave = cos(wave_uv.x + TIME * vel) * ampl;

    // Calculate the response values
    float res1 = abs(2.5 + noise - wave_uv.y * 5.0);
    float res2 = abs(2.5 + wave - wave_uv.y * 5.0);

    // Ensure `res1` is properly conditioned by `quality_signal`
    res1 = quality_signal ? max(res1, 1.0) : res1;

    // Calculate the final result influencing the emission
    float res = res1 * res2;

    // Invert or adjust the emission intensity calculation
    float color = (1.0 - res * tightness); // Inversion logic

    // Ensure color is within valid range
    color = clamp(color, 0.0, 1.0);

    // Set the emission based on the calculated color
    EMISSION = color * wave_color.rgb;
}
"
